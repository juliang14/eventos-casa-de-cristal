DELIMITER &
CREATE PROCEDURE PR_CREAR_EVENTOS( 
	  P_NOMBRE_EVENTO 	VARCHAR (50)
    , P_TIPO_IMAGEN		VARCHAR (30)
    , IMAGEN 			VARCHAR (60)
)

BEGIN
	
    -- Declarar variables
    DECLARE V_ESTADO	VARCHAR(20) DEFAULT 'ACTIVO';
    DECLARE V_CANTIDAD_EVENTO	INT;
    DECLARE V_NOMBRE_EVENTO VARCHAR (50);
    
    -- VALIDAR SI YA EXISTE EL EVENTO
    SELECT COUNT(*) INTO V_CANTIDAD_EVENTO FROM EVENTO WHERE TIPO_DE_EVENTO = P_NOMBRE_EVENTO;
    
    -- FORMATEAR NOMBRE
    SELECT FN_FORMATEAR_NOMBRES(P_NOMBRE_EVENTO,'NOR') INTO V_NOMBRE_EVENTO;
    
    IF V_CANTIDAD_EVENTO = 0 THEN
    
		-- INSERTAR 
		INSERT INTO Evento( Tipo_de_evento, tipo_imagen, imagen, Estado)
		VALUES
		(V_NOMBRE_EVENTO, P_TIPO_IMAGEN, IMAGEN, V_ESTADO)
        ;
    
    END IF;
    
END &
-- ------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_CREAR_EMPLEADO( P_PRIMER_NOMBRE VARCHAR (40), P_SEGUNDO_NOMBRE VARCHAR (40), P_PRIMER_APELLIDO VARCHAR (40), P_SEGUNDO_APELLIDO VARCHAR (40),
P_TIPO_DOCUMENTOID_DOCUMENTO INT(10), P_NUMERO_DOCUMENTO VARCHAR (20), P_CARGOID_CARGO INT, P_EDAD INT (5), P_TELEFONO BIGINT (20), P_DIRECCION VARCHAR (50), P_EMAIL  VARCHAR (50), P_ROLID_ROL INT)

BEGIN
    -- Declarar variables
    DECLARE V_PRIMER_NOMBRE 				VARCHAR (50) DEFAULT UPPER(P_PRIMER_NOMBRE);
    DECLARE V_SEGUNDO_NOMBRE 				VARCHAR (40) DEFAULT UPPER(P_SEGUNDO_NOMBRE); 
    DECLARE V_PRIMER_APELLIDO 				VARCHAR (40) DEFAULT UPPER(P_PRIMER_APELLIDO);
    DECLARE V_SEGUNDO_APELLIDO 				VARCHAR (40) DEFAULT UPPER(P_SEGUNDO_APELLIDO);
	DECLARE V_TIPO_DOCUMENTOID_DOCUMENTO 	INT		(10) DEFAULT UPPER(P_TIPO_DOCUMENTOID_DOCUMENTO);
    DECLARE V_NUMERO_DOCUMENTO 				VARCHAR (20) DEFAULT UPPER(P_NUMERO_DOCUMENTO);
    DECLARE V_CARGOID_CARGO 				INT 	(10) DEFAULT UPPER(P_CARGOID_CARGO);
    DECLARE V_EDAD 							INT 	(5)  DEFAULT UPPER(P_EDAD); 
    DECLARE V_TELEFONO 						BIGINT	(20) DEFAULT UPPER(P_TELEFONO);
    DECLARE V_DIRECCION 					VARCHAR (50) DEFAULT UPPER(P_DIRECCION); 
    DECLARE V_EMAIL  						VARCHAR (50) DEFAULT UPPER(P_EMAIL);
    DECLARE V_ROLID_ROL  					INT		(15) DEFAULT P_ROLID_ROL;
    DECLARE V_ESTADO  						VARCHAR (30) DEFAULT 'ACTIVO';
    DECLARE V_NUMERO_ALEATORIO_USUARIO     	BIGINT	(20);
    DECLARE V_NUMERO_ALEATORIO_CLAVE     	BIGINT	(20);
    DECLARE V_USUARIO_SISTEMA             	VARCHAR (50);
    DECLARE V_ULTIMO_REGISTRO				INT		(10);
    
    -- Generar n√∫mero aleatorio
    SELECT VALOR_ALEATORIO INTO V_NUMERO_ALEATORIO_USUARIO FROM( SELECT FLOOR(RAND()*(10000-1+1))+1 AS VALOR_ALEATORIO)  AS NUMERO_ALEATORIO_USUARIO;
    SELECT VALOR_ALEATORIO INTO V_NUMERO_ALEATORIO_CLAVE   FROM( SELECT LPAD(FLOOR(RAND()*(100000-1+1))+1,6,0)  AS VALOR_ALEATORIO) AS NUMERO_ALEATORIO_CLAVE;
    
    -- Generar usuario para login
    SELECT USUARIO_SISTEMA INTO V_USUARIO_SISTEMA FROM (SELECT CONCAT(SUBSTRING(V_PRIMER_NOMBRE,1,1),V_PRIMER_APELLIDO,V_NUMERO_ALEATORIO_USUARIO) AS USUARIO_SISTEMA) AS CREAR_USUARIO_SISTEMA;
    
    -- Crea el registro en la tabla usuario
    INSERT INTO EMPLEADO
    (Id_empleado, Primer_nombre, Segundo_nombre, Primer_apellido, Segundo_apellido, Tipo_documentoId_documento, Numero_documento, cargoId_cargo, Edad, Telefono, Direccion, Email, RolId_rol) 
    VALUES
    (NULL, V_PRIMER_NOMBRE, V_SEGUNDO_NOMBRE, V_PRIMER_APELLIDO, V_SEGUNDO_APELLIDO, V_TIPO_DOCUMENTOID_DOCUMENTO, V_NUMERO_DOCUMENTO, V_CARGOID_CARGO, V_EDAD, V_TELEFONO, V_DIRECCION, V_EMAIL, V_ROLID_ROL);
	
    -- Validar ultimo registro en la tabla usuario
    SELECT ULTIMO_ID_EMPLEADO INTO V_ULTIMO_REGISTRO FROM (select MAX(ID_EMPLEADO) AS ULTIMO_ID_EMPLEADO from EMPLEADO) AS ULTIMO_ID_EMPLEADO;
    
    -- crear usuario para login
    INSERT INTO USUARIO_SISTEMA
	(Id_Usuariosistema, Nombre_usuario, Clave, Avatar, Estado, UsuarioId_usuario, EmpleadoId_empleado)
	VALUES
	(NULL, V_USUARIO_SISTEMA, V_NUMERO_ALEATORIO_CLAVE, NULL, V_ESTADO, NULL, V_ULTIMO_REGISTRO);
    
END &

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_ACTUALIZAR_USUARIO( P_ID_USUARIO INT, P_PRIMER_NOMBRE VARCHAR (40), P_SEGUNDO_NOMBRE VARCHAR (40), P_PRIMER_APELLIDO VARCHAR (40), P_SEGUNDO_APELLIDO VARCHAR (40),
P_TIPO_DOCUMENTOID_DOCUMENTO VARCHAR(10), P_NUMERO_DOCUMENTO VARCHAR (20), P_EDAD INT (5), P_TELEFONO BIGINT (20), P_DIRECCION VARCHAR (50), P_EMAIL  VARCHAR (50))

BEGIN
    -- Declarar variables
    DECLARE V_PRIMER_NOMBRE 				VARCHAR (50) DEFAULT UPPER(P_PRIMER_NOMBRE);
    DECLARE V_SEGUNDO_NOMBRE 				VARCHAR (40) DEFAULT UPPER(P_SEGUNDO_NOMBRE); 
    DECLARE V_PRIMER_APELLIDO 				VARCHAR (40) DEFAULT UPPER(P_PRIMER_APELLIDO);
    DECLARE V_SEGUNDO_APELLIDO 				VARCHAR (40) DEFAULT UPPER(P_SEGUNDO_APELLIDO);
	DECLARE V_TIPO_DOCUMENTOID_DOCUMENTO 	VARCHAR	(10) ;
    DECLARE V_NUMERO_DOCUMENTO 				VARCHAR (20) DEFAULT UPPER(P_NUMERO_DOCUMENTO);
    DECLARE V_EDAD 							INT 	(5)  DEFAULT UPPER(P_EDAD); 
    DECLARE V_TELEFONO 						BIGINT	(20) DEFAULT UPPER(P_TELEFONO);
    DECLARE V_DIRECCION 					VARCHAR (50) DEFAULT UPPER(P_DIRECCION); 
    DECLARE V_EMAIL  						VARCHAR (50) DEFAULT UPPER(P_EMAIL);
    DECLARE V_ROLID_ROL  					INT		(15) DEFAULT 1;
	
    
    SELECT ID_DOCUMENTO INTO V_TIPO_DOCUMENTOID_DOCUMENTO FROM(SELECT ID_DOCUMENTO FROM TIPO_DOCUMENTO WHERE SIGLAS =P_TIPO_DOCUMENTOID_DOCUMENTO) AS ID_DOCUMENTO;
    
    /*select case P_TIPO_DOCUMENTOID_DOCUMENTO
		WHEN 'CC' 	THEN 1
        WHEN 'CE' 	THEN 2
        WHEN 'NIT'  THEN 3
        ELSE '-1'
	END INTO V_TIPO_DOCUMENTOID_DOCUMENTO;*/
     
    -- Actualizar registro de la tabla usuario sistema
    UPDATE USUARIO 							
		SET   PRIMER_NOMBRE 				=	V_PRIMER_NOMBRE
			, SEGUNDO_NOMBRE 				=	V_SEGUNDO_NOMBRE
			, PRIMER_APELLIDO 				=	V_PRIMER_APELLIDO
			, SEGUNDO_APELLIDO 				=	V_SEGUNDO_APELLIDO
			, TIPO_DOCUMENTOID_DOCUMENTO	=	V_TIPO_DOCUMENTOID_DOCUMENTO
			, NUMERO_DOCUMENTO 				=	V_NUMERO_DOCUMENTO
			, EDAD 							=	V_EDAD
			, TELEFONO 						=	V_TELEFONO
			, DIRECCION 					=	V_DIRECCION
			, EMAIL  						= 	V_EMAIL
	WHERE ID_USUARIO = P_ID_USUARIO;
    
END &

-- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DELIMITER &
CREATE PROCEDURE PR_ACTUALIZAR_PEDIDO
( 
	  P_ID_PEDIDO 			INT
    , P_CIUDAD 				VARCHAR (60)
    , P_BARRIO 				VARCHAR (60)
    , P_DIRECCION			VARCHAR (100)
    , P_ESTADO 				VARCHAR (40)
    , P_FECHA_INICIO_EVENTO DATETIME
    , P_FECHA_FIN_EVENTO	DATETIME
)

BEGIN
    -- Declarar variables
    DECLARE V_ID_ESTADO_PEDIDO  					INT	 ;
	
    -- Obtener Id del estado pedido
    SELECT ID_ESTADOPEDIDO INTO V_ID_ESTADO_PEDIDO FROM(SELECT ID_ESTADOPEDIDO FROM ESTADO_PEDIDO WHERE ESTADO =P_ESTADO) AS ID_ESTADOPEDIDO;
    
    -- Editar registro de la tabla usuario sistema
    UPDATE PEDIDO 							
		SET  CIUDAD_EVENTO					=	P_CIUDAD
			,BARRIO_EVENTO					=	P_BARRIO
            ,DIRECCION_EVENTO				=	P_DIRECCION
            ,FECHA_INICIO_EVENTO			=	P_FECHA_INICIO_EVENTO
			,FECHA_FIN_EVENTO				=	P_FECHA_FIN_EVENTO
			,ESTADOPEDIDOID_ESTADOPEDIDO 	=	V_ID_ESTADO_PEDIDO
	WHERE ID_PEDIDO = P_ID_PEDIDO;
    
    -- Editar registro de la tabla TURNOS
    UPDATE TURNO 							
		SET  FECHA_INICIO_TURNO			=	P_FECHA_INICIO_EVENTO
			,FECHA_FIN_TURNO			=	P_FECHA_FIN_EVENTO
	WHERE PEDIDOID_PEDIDO = P_ID_PEDIDO;
    
END &

-- -------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_ACTUALIZAR_INVENTARIO( 
	P_ID_INVENTARIO		INT
	,P_INVENTARIO		VARCHAR (50)
	,P_CANTIDAD			INT
    ,P_VALOR_SIN_IVA	INT
    ,P_CATEGORIA		VARCHAR (50)
)

BEGIN
	
    -- Declarar variables
    DECLARE V_INVENTARIO		VARCHAR (50) DEFAULT UPPER(P_INVENTARIO);
    DECLARE V_VALOR_SIN_IVA 	INT DEFAULT	ROUND(P_VALOR_SIN_IVA);
    DECLARE V_VALOR_TOTAL 		INT DEFAULT ROUND(V_VALOR_SIN_IVA * 1.19);
	DECLARE V_IVA				INT DEFAULT V_VALOR_TOTAL - V_VALOR_SIN_IVA;
	DECLARE V_CATEGORIA 		VARCHAR (50) DEFAULT UPPER(P_CATEGORIA);
    DECLARE V_ESTADO			VARCHAR (30) DEFAULT 'ACTIVO';
    DECLARE V_INVENTARIO_NUEVO  VARCHAR (50); 
    
    SELECT INVENTARIO_NUEVO INTO V_INVENTARIO_NUEVO FROM(SELECT CONCAT(SUBSTRING(V_INVENTARIO,1,1),LOWER(SUBSTRING(V_INVENTARIO,2))) AS INVENTARIO_NUEVO) AS INVENTARIO;
    
   -- Actualizar Inventario
   UPDATE Inventario 
   SET 	Inventario		= V_INVENTARIO_NUEVO
		,Cantidad		= P_CANTIDAD
        ,Valor_sin_iva	= V_VALOR_SIN_IVA
        ,Iva			= V_IVA
        ,Valor_Total	= V_VALOR_TOTAL
        ,Categoria		= V_CATEGORIA
        ,Estado			= V_ESTADO
   WHERE ID_INVENTARIO = P_ID_INVENTARIO
   ;
    
END &

-- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_ACTUALIZAR_EVENTO( 
	P_ID_EVENTO 		INT
	,P_NOMBRE_EVENTO 	VARCHAR (50)
    , P_TIPO_IMAGEN		VARCHAR (30)
    , P_IMAGEN 			VARCHAR (60)
)

BEGIN
	 -- Declarar variables
    DECLARE V_ID_EVENTO	INT;
    DECLARE V_CANTIDAD_EVENTO	INT;
    DECLARE V_NOMBRE_EVENTO VARCHAR (50);
    
    -- VALIDAR SI YA EXISTE EL EVENTO
    SELECT COUNT(*) INTO V_CANTIDAD_EVENTO FROM EVENTO WHERE TIPO_DE_EVENTO = P_NOMBRE_EVENTO;
    
    -- VALIDAR ID EVENTO
    SELECT ID_EVENTO INTO V_ID_EVENTO FROM EVENTO WHERE TIPO_DE_EVENTO = P_NOMBRE_EVENTO;
    
    -- FORMATEAR NOMBRE
    SELECT FN_FORMATEAR_NOMBRES(P_NOMBRE_EVENTO,'NOR') INTO V_NOMBRE_EVENTO;
    
    IF V_CANTIDAD_EVENTO = 0 OR V_ID_EVENTO = P_ID_EVENTO THEN
    
		-- Actualizar registro de la tabla evento
		UPDATE EVENTO 
        SET TIPO_DE_EVENTO = P_NOMBRE_EVENTO 
			,TIPO_IMAGEN = P_TIPO_IMAGEN
            ,IMAGEN = P_IMAGEN
		WHERE ID_EVENTO = P_ID_EVENTO;
    
    END IF;
    
END &

-- --------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_ACTUALIZAR_EMPLEADO( P_ID_EMPLEADO INT, P_PRIMER_NOMBRE VARCHAR (40), P_SEGUNDO_NOMBRE VARCHAR (40), P_PRIMER_APELLIDO VARCHAR (40), P_SEGUNDO_APELLIDO VARCHAR (40),
P_TIPO_DOCUMENTOID_DOCUMENTO VARCHAR(10), P_NUMERO_DOCUMENTO VARCHAR (20), P_CARGOID_CARGO VARCHAR (50), P_EDAD INT (5), P_TELEFONO BIGINT (20), P_DIRECCION VARCHAR (50), P_EMAIL  VARCHAR (50), P_ROLID_ROL VARCHAR(50))

BEGIN
    -- Declarar variables
    DECLARE V_PRIMER_NOMBRE 				VARCHAR (50) DEFAULT UPPER(P_PRIMER_NOMBRE);
    DECLARE V_SEGUNDO_NOMBRE 				VARCHAR (40) DEFAULT UPPER(P_SEGUNDO_NOMBRE); 
    DECLARE V_PRIMER_APELLIDO 				VARCHAR (40) DEFAULT UPPER(P_PRIMER_APELLIDO);
    DECLARE V_SEGUNDO_APELLIDO 				VARCHAR (40) DEFAULT UPPER(P_SEGUNDO_APELLIDO);
	DECLARE V_TIPO_DOCUMENTOID_DOCUMENTO 	VARCHAR	(10) ;
    DECLARE V_NUMERO_DOCUMENTO 				VARCHAR (20) DEFAULT UPPER(P_NUMERO_DOCUMENTO);
    DECLARE V_CARGOID_CARGO 				INT 	(5)  ; 
    DECLARE V_EDAD 							INT 	(5)  DEFAULT UPPER(P_EDAD);
    DECLARE V_TELEFONO 						BIGINT	(20) DEFAULT UPPER(P_TELEFONO);
    DECLARE V_DIRECCION 					VARCHAR (50) DEFAULT UPPER(P_DIRECCION); 
    DECLARE V_EMAIL  						VARCHAR (50) DEFAULT UPPER(P_EMAIL);
    DECLARE V_ROLID_ROL  					INT		(15) ;
	
    -- Obtener Id del documento enviado
    SELECT ID_DOCUMENTO INTO V_TIPO_DOCUMENTOID_DOCUMENTO FROM(SELECT ID_DOCUMENTO FROM TIPO_DOCUMENTO WHERE SIGLAS = P_TIPO_DOCUMENTOID_DOCUMENTO) AS ID_DOCUMENTO;
    
    -- Obtener Id del cargo enviado
    SELECT ID_CARGO INTO V_CARGOID_CARGO FROM(SELECT ID_CARGO FROM CARGO WHERE NOMBRE_DE_CARGO =P_CARGOID_CARGO) AS ID_CARGO;
    
    -- Obtener Id del rol enviado
    SELECT ID_ROL INTO V_ROLID_ROL FROM(SELECT ID_ROL FROM ROL WHERE NOMBRE_ROL =P_ROLID_ROL) AS ID_ROL;
    
    -- Editar registro de la tabla usuario sistema
    UPDATE EMPLEADO 							
		SET   PRIMER_NOMBRE 				=	V_PRIMER_NOMBRE
			, SEGUNDO_NOMBRE 				=	V_SEGUNDO_NOMBRE
			, PRIMER_APELLIDO 				=	V_PRIMER_APELLIDO
			, SEGUNDO_APELLIDO 				=	V_SEGUNDO_APELLIDO
			, TIPO_DOCUMENTOID_DOCUMENTO	=	V_TIPO_DOCUMENTOID_DOCUMENTO
			, NUMERO_DOCUMENTO 				=	V_NUMERO_DOCUMENTO
            , CARGOID_CARGO					=	V_CARGOID_CARGO
			, EDAD 							=	V_EDAD
			, TELEFONO 						=	V_TELEFONO
			, DIRECCION 					=	V_DIRECCION
			, EMAIL  						= 	V_EMAIL
            , ROLID_ROL						=	V_ROLID_ROL
	WHERE ID_EMPLEADO = P_ID_EMPLEADO;
    
END &

-- --------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_ACTUALIZAR_CARGO( P_CODIGO INT, P_NOMBRE VARCHAR(30) )

BEGIN

	UPDATE CARGO SET NOMBRE_DE_CARGO = P_NOMBRE WHERE ID_CARGO= P_CODIGO;
    
END &

-- --------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE FUNCTION FN_CALCULAR_EDAD (P_AZO_NACIMIENTO INT)
RETURNS INT
-- Se debe colocar esto para que permita la creacion de funciones
DETERMINISTIC
READS SQL DATA

BEGIN
	DECLARE V_AZO_ACTUAL 	INT ;
	DECLARE V_EDAD 			INT ;
    
    SELECT AZO_ACTUAL INTO V_AZO_ACTUAL FROM (SELECT CAST(SUBSTRING(SYSDATE(),1,4) AS SIGNED) AS AZO_ACTUAL) AS ACTUAL_AZO;
    
    SET V_EDAD = V_AZO_ACTUAL - P_AZO_NACIMIENTO;
    
RETURN V_EDAD;
END &

-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE FUNCTION FN_FORMATEAR_NOMBRES (P_NOMBRE VARCHAR(200), P_TIPO_FORMATO VARCHAR(10))
RETURNS VARCHAR (200)
-- Se debe colocar esto para que permita la creacion de funciones
DETERMINISTIC
READS SQL DATA

BEGIN
	DECLARE V_NOMBRE		VARCHAR (200) ;
    
    IF P_TIPO_FORMATO ='MAY' THEN
    
		SET V_NOMBRE = UPPER(P_NOMBRE);
    
    ELSEIF P_TIPO_FORMATO ='MIN' THEN
    
		SET V_NOMBRE = LOWER(P_NOMBRE);
        
	ELSEIF P_TIPO_FORMATO ='NOR' THEN
    
		SET V_NOMBRE = CONCAT(UPPER(SUBSTRING(P_NOMBRE,1,1)),LOWER(SUBSTRING(P_NOMBRE,2)));
    
    END IF;
    
    
RETURN V_NOMBRE;
END &

-- ------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW VW_VER_USUARIOS
(    ID_USUARIO
    ,PRIMER_NOMBRE
    ,SEGUNDO_NOMBRE
    ,PRIMER_APELLIDO
    ,SEGUNDO_APELLIDO
    ,DOCUMENTO
    ,NUMERO_DOCUMENTO
    ,EDAD
    ,TELEFONO
    ,DIRECCION
    ,EMAIL
    ,ROL
    ,USUARIO_SISTEMA
    ,CLAVE
    ,RESPUESTA_MODAL
    ,DESCRIPCION_MODAL
)

AS

SELECT 	A.ID_USUARIO
		,A.PRIMER_NOMBRE
        ,A.SEGUNDO_NOMBRE 		
		,A.PRIMER_APELLIDO
        ,A.SEGUNDO_APELLIDO
		,B.SIGLAS																					AS DOCUMENTO
        ,A.NUMERO_DOCUMENTO 			
		,A.EDAD
        ,A.TELEFONO
        ,A.DIRECCION
		,A.EMAIL
		,D.NOMBRE_ROL 																				AS ROL
		,C.NOMBRE_USUARIO 																			AS USUARIO_SISTEMA
		,C.CLAVE
        ,CONCAT('Cliente -',A.ID_USUARIO)															AS RESPUESTA_MODAL
        ,CONCAT(A.PRIMER_NOMBRE,' ',A.SEGUNDO_NOMBRE,' ',A.PRIMER_APELLIDO,' ',A.SEGUNDO_APELLIDO)	AS DESCRIPCION_MODAL
FROM 		USUARIO 		AS A
INNER JOIN 	TIPO_DOCUMENTO 	AS B		ON A.Tipo_documentoId_documento = B.id_documento
INNER JOIN 	USUARIO_SISTEMA AS C		ON C.USUARIOID_USUARIO = A.id_usuario
INNER JOIN 	ROL 			AS D		ON D.id_rol = A.rolId_rol
WHERE C.ESTADO ='ACTIVO'
;

-- ----------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW VW_VER_TURNO
(	
	ID_TURNO
	,FECHA_INICIO_EVENTO
	,FECHA_FIN_EVENTO
	,ID_EMPLEADO
	,NOMBRE
	,NOMBRE_DE_CARGO
	,ID_PEDIDO
	,CIUDAD_EVENTO
	,BARRIO_EVENTO
	,DIRECCION_EVENTO
)

AS

SELECT 	C.ID_TURNO
        ,FECHA_INICIO_EVENTO
        ,FECHA_FIN_EVENTO
        ,A.ID_EMPLEADO
		,CONCAT(A.PRIMER_NOMBRE, ' ',A.SEGUNDO_NOMBRE, ' ',A.PRIMER_APELLIDO, ' ',A.SEGUNDO_APELLIDO) 	AS NOMBRE
        ,NOMBRE_DE_CARGO
        ,ID_PEDIDO
        ,CIUDAD_EVENTO
        ,BARRIO_EVENTO
        ,DIRECCION_EVENTO
FROM 		EMPLEADO 		AS A
INNER JOIN 	EMPLEADO_TURNO	AS B ON A.ID_EMPLEADO		=	B.EMPLEADOID_EMPLEADO
INNER JOIN	TURNO			AS C ON B.TURNOID_TURNO		=	C.ID_TURNO
INNER JOIN	PEDIDO			AS D ON C.PEDIDOID_PEDIDO	=	D.ID_PEDIDO
INNER JOIN	CARGO			AS E ON A.CARGOID_CARGO		=	E.ID_CARGO
-- WHERE A.ID_EMPLEADO = 1
ORDER BY 1
;

-- ----------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW VW_VER_PEDIDOS
(    ID_PEDIDO
	,FECHA_PEDIDO
    ,NOMBRES
    ,APELLIDOS
    ,DOCUMENTO
    ,ID_PAQUETE    
    ,EVENTO
    ,PAQUETE
    ,VALOR_PAQUETE
    ,IVA
    ,VALOR_TOTAL
    ,ESTADO
    ,ID_FACTURA
    ,TIPO_DE_FACTURA
    ,FECHA_INICIO_EVENTO
	,FECHA_FIN_EVENTO
    ,CIUDAD_EVENTO
	,BARRIO_EVENTO
	,DIRECCION_EVENTO
    ,RESPUESTA_MODAL
    ,DESCRIPCION_MODAL
)

AS

SELECT 	 A.ID_PEDIDO
		,A.FECHA_PEDIDO
		,CONCAT(B.PRIMER_NOMBRE, ' ', B.SEGUNDO_NOMBRE)			AS NOMBRES
        ,CONCAT(B.PRIMER_APELLIDO, '', B.SEGUNDO_APELLIDO)		AS APELLIDOS
        ,CONCAT(E.SIGLAS, ' - ', B.NUMERO_DOCUMENTO)			AS DOCUMENTO
		,C.ID_PAQUETE
        ,D.TIPO_DE_EVENTO										AS EVENTO
        ,C.TIPO_DE_PAQUETE										AS PAQUETE
        ,C.VALOR_PAQUETE
        ,C.VALOR_IVA											AS IVA
        ,C.VALOR_TOTAL
        ,F.ESTADO
        ,G.ID_FACTURA
        ,G.TIPO_DE_FACTURA
        ,A.FECHA_INICIO_EVENTO
        ,A.FECHA_FIN_EVENTO
        ,CIUDAD_EVENTO
        ,BARRIO_EVENTO
        ,DIRECCION_EVENTO
        ,CONCAT('Pedido  -',A.ID_PEDIDO)															AS RESPUESTA_MODAL
        ,CONCAT(B.PRIMER_NOMBRE,' ',B.SEGUNDO_NOMBRE,' ',B.PRIMER_APELLIDO,' ',B.SEGUNDO_APELLIDO)	AS DESCRIPCION_MODAL
FROM PEDIDO						AS A
INNER JOIN USUARIO				AS B	ON A.USUARIOID_USUARIO 				= B.ID_USUARIO
INNER JOIN PAQUETE				AS C	ON A.PAQUETE_IDPAQUETE 				= C.ID_PAQUETE
INNER JOIN EVENTO				AS D	ON C.EVENTOID_EVENTO 				= D.ID_EVENTO
INNER JOIN TIPO_DOCUMENTO		AS E	ON B.TIPO_DOCUMENTOID_DOCUMENTO		= E.ID_DOCUMENTO
INNER JOIN ESTADO_PEDIDO		AS F	ON A.ESTADOPEDIDOID_ESTADOPEDIDO	= F.ID_ESTADOPEDIDO
INNER JOIN FACTURA				AS G	ON A.FACTURAID_FACTURA				= G.ID_FACTURA
ORDER BY ID_PEDIDO
;

-- ----------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW VW_VER_PAQUETES_EVENTOS
(    ID_EVENTO
	,TIPO_DE_EVENTO
	,ID_PAQUETE
	,TIPO_DE_PAQUETE
	,CANTIDAD_PERSONAS
    ,VALOR_TOTAL
)

AS

SELECT 	 ID_EVENTO
		,TIPO_DE_EVENTO
		,ID_PAQUETE
		,TIPO_DE_PAQUETE
        ,CANTIDAD_PERSONAS
        ,VALOR_TOTAL
FROM PAQUETE A
INNER JOIN EVENTO				AS D	ON A.EVENTOID_EVENTO 				= D.ID_EVENTO
WHERE A.ESTADO ='ACTIVO'
ORDER BY ID_EVENTO ASC
;

-- -----------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW VW_VER_PAQUETE
(    ID_EVENTO
	,TIPO_DE_EVENTO
	,ID_PAQUETE
	,TIPO_DE_PAQUETE
    ,ID_INVENTARIO
    ,INVENTARIO
    ,CANTIDAD
    ,VALOR_SIN_IVA
	,IVA
	,VALOR_TOTAL
)

AS

SELECT 	 D.ID_EVENTO
		,D.TIPO_DE_EVENTO
		,A.ID_PAQUETE
		,A.TIPO_DE_PAQUETE
        ,C.ID_INVENTARIO
        ,C.INVENTARIO
        ,B.CANTIDAD
        ,B.VALOR_SIN_IVA
        ,B.IVA
        ,B.VALOR_TOTAL
FROM PAQUETE A
INNER JOIN INVENTARIO_PAQUETE	AS B	ON A.ID_PAQUETE						= B.PAQUETEID_PAQUETE
INNER JOIN INVENTARIO			AS C	ON B.INVENTARIOID_INVENTARIO		= C.ID_INVENTARIO
INNER JOIN EVENTO				AS D	ON A.EVENTOID_EVENTO 				= D.ID_EVENTO
WHERE A.ESTADO ='ACTIVO'
ORDER BY ID_EVENTO ASC
;

-- ---------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW VW_VER_INVENTARIO
(
	ID_INVENTARIO
	,INVENTARIO
	,CANTIDAD
	,VALOR_SIN_IVA
	,IVA
	,VALOR_TOTAL
	,CATEGORIA
)
AS

SELECT	ID_INVENTARIO
		,INVENTARIO
        ,CANTIDAD
        ,VALOR_SIN_IVA
        ,IVA
        ,VALOR_TOTAL
        ,CATEGORIA
FROM INVENTARIO
WHERE ESTADO='ACTIVO';

-- ----------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW VW_VER_EVENTOS(
	ID_EVENTO
	,TIPO_DE_EVENTO
    ,TIPO_IMAGEN
	,IMAGEN
	,ESTADO
)

AS

SELECT 	 ID_EVENTO
		,TIPO_DE_EVENTO
        ,TIPO_IMAGEN
        ,IMAGEN
        ,ESTADO
FROM EVENTO
WHERE ESTADO ='ACTIVO'
;

-- -------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW VW_VER_EMPLEADOS
(    ID_EMPLEADO
    ,PRIMER_NOMBRE
    ,SEGUNDO_NOMBRE
    ,PRIMER_APELLIDO
    ,SEGUNDO_APELLIDO
    ,DOCUMENTO
    ,NUMERO_DOCUMENTO
    ,CARGO
    ,EDAD
    ,TELEFONO
    ,DIRECCION
    ,EMAIL
    ,ROL
    ,USUARIO_SISTEMA
    ,CLAVE
    ,RESPUESTA_MODAL
    ,DESCRIPCION_MODAL
)

AS

SELECT 	A.ID_EMPLEADO
		,A.PRIMER_NOMBRE
        ,A.SEGUNDO_NOMBRE 		
		,A.PRIMER_APELLIDO
        ,A.SEGUNDO_APELLIDO
		,B.SIGLAS																					AS DOCUMENTO
        ,A.NUMERO_DOCUMENTO
        ,E.NOMBRE_DE_CARGO																			AS CARGO
		,A.EDAD
        ,A.TELEFONO
        ,A.DIRECCION
		,A.EMAIL
		,D.NOMBRE_ROL 																				AS ROL
		,C.NOMBRE_USUARIO 																			AS USUARIO_SISTEMA
		,C.CLAVE
        ,CONCAT('Empleado-',A.ID_EMPLEADO)															AS RESPUESTA_MODAL
        ,CONCAT(A.PRIMER_NOMBRE,' ',A.SEGUNDO_NOMBRE,' ',A.PRIMER_APELLIDO,' ',A.SEGUNDO_APELLIDO)	AS DESCRIPCION_MODAL
FROM 		EMPLEADO 		AS A
INNER JOIN 	TIPO_DOCUMENTO 	AS B		ON A.Tipo_documentoId_documento = B.id_documento
INNER JOIN 	USUARIO_SISTEMA AS C		ON C.EMPLEADOID_EMPLEADO 		= A.ID_EMPLEADO
INNER JOIN 	ROL 			AS D		ON D.id_rol 					= A.rolId_rol
INNER JOIN	CARGO			AS E		ON A.CARGOID_CARGO 				= E.ID_CARGO
WHERE C.ESTADO ='ACTIVO'
;

-- ---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW VW_REPORTE_VENTAS
(     ID_PEDIDO
    ,TIPO_DE_PAQUETE
    ,NOMBRES_PAGADOR
    ,APELLIDOS_PAGADOR
    ,ID_FACTURA
    ,VALOR_TOTAL
    ,TIPO_DE_FACTURA
    ,ID_PAGO
    ,NOMBRE_PAGO
)

AS

SELECT PE.ID_PEDIDO
     , PA.TIPO_DE_PAQUETE
     , CONCAT(US.PRIMER_NOMBRE,' ',US.SEGUNDO_NOMBRE) NOMBRES_PAGADOR
     , CONCAT(US.PRIMER_APELLIDO,' ',US.SEGUNDO_APELLIDO) APELLIDOS_PAGADOR
     , FA.ID_FACTURA
     , FA.VALOR_TOTAL
     , FA.TIPO_DE_FACTURA
     , PG.ID_PAGO
     , TP.NOMBRE_PAGO
FROM PEDIDO PE
INNER JOIN PAQUETE PA         ON PA.ID_PAQUETE         	= PE.PAQUETE_IDPAQUETE
INNER JOIN USUARIO US         ON US.ID_USUARIO         	= PE.USUARIOID_USUARIO
INNER JOIN FACTURA FA         ON FA.ID_FACTURA     		= PE.FACTURAID_FACTURA
INNER JOIN PAGOS   PG         ON PG.USUARIOID_USUARIO 	= US.ID_USUARIO
INNER JOIN TIPOS_DE_PAGO TP ON TP.ID_TIPO_PAGO        	= PG.TIPOS_DE_PAGOID_TIPO_PAGO
ORDER BY 1
;

-- ----------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW VW_PRODUCTOS_VENDIDOS 
( 	CANTIDAD
	,TIPO_EVENTO
)

AS

SELECT COUNT(ID_PEDIDO) CANTIDAD
       ,TIPO_DE_PAQUETE TIPO_EVENTO
FROM(
SELECT PE.ID_PEDIDO
     , PA.TIPO_DE_PAQUETE
     , CONCAT(US.PRIMER_NOMBRE,' ',US.SEGUNDO_NOMBRE) NOMBRES_PAGADOR
     , CONCAT(US.PRIMER_APELLIDO,' ',US.SEGUNDO_APELLIDO) APELLIDOS_PAGADOR
     , FA.ID_FACTURA
     , FA.VALOR_TOTAL
     , FA.TIPO_DE_FACTURA
     , PG.ID_PAGO
     , TP.NOMBRE_PAGO
FROM PEDIDO PE
INNER JOIN PAQUETE PA         ON PA.ID_PAQUETE        = PE.PAQUETE_IDPAQUETE
INNER JOIN USUARIO US         ON US.ID_USUARIO        = PE.USUARIOID_USUARIO
INNER JOIN FACTURA FA         ON FA.ID_FACTURA		  = PE.FACTURAID_FACTURA
INNER JOIN PAGOS   PG         ON PG.USUARIOID_USUARIO = US.ID_USUARIO
INNER JOIN TIPOS_DE_PAGO TP ON TP.ID_TIPO_PAGO        = PG.TIPOS_DE_PAGOID_TIPO_PAGO
ORDER BY 1
) A
GROUP BY TIPO_DE_PAQUETE
ORDER BY 1 DESC
;

-- ---------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW VW_PAGO_PREFERIDO 
(	PAGO_PREFERIDO 
)

AS

SELECT MAX(PAGO) PAGO_PREFERIDO
FROM(
    SELECT COUNT(ID_PAGO) CANTIDAD
           ,NOMBRE_PAGO PAGO
    FROM(
        SELECT PE.ID_PEDIDO
             , PA.TIPO_DE_PAQUETE
             , CONCAT(US.PRIMER_NOMBRE,' ',US.SEGUNDO_NOMBRE) NOMBRES_PAGADOR
             , CONCAT(US.PRIMER_APELLIDO,' ',US.SEGUNDO_APELLIDO) APELLIDOS_PAGADOR
             , FA.ID_FACTURA
             , FA.VALOR_TOTAL
             , FA.TIPO_DE_FACTURA
             , PG.ID_PAGO
             , TP.NOMBRE_PAGO
        FROM PEDIDO PE
        INNER JOIN PAQUETE PA         ON PA.ID_PAQUETE         	= PE.PAQUETE_IDPAQUETE
        INNER JOIN USUARIO US         ON US.ID_USUARIO         	= PE.USUARIOID_USUARIO
        INNER JOIN FACTURA FA         ON FA.ID_FACTURA			= PE.FACTURAID_FACTURA
        INNER JOIN PAGOS   PG         ON PG.USUARIOID_USUARIO 	= US.ID_USUARIO
        INNER JOIN TIPOS_DE_PAGO TP ON TP.ID_TIPO_PAGO        	= PG.TIPOS_DE_PAGOID_TIPO_PAGO
        ORDER BY 1
    ) A
    GROUP BY NOMBRE_PAGO
    ORDER BY 1 DESC
    ) B
    ;
    
    -- -------------------------------------------------------------------------------------------------------------------------------------------
    
    CREATE OR REPLACE VIEW VW_EVENTO_MENOS_VENDIDO 
(	EVENTO_MENOS_VENDIDO 
)

AS

SELECT MIN(TIPO_EVENTO) EVENTO_MENOS_VENDIDO
FROM(
    SELECT COUNT(ID_PEDIDO) CANTIDAD
           ,TIPO_DE_PAQUETE TIPO_EVENTO
    FROM(
    SELECT PE.ID_PEDIDO
         , PA.TIPO_DE_PAQUETE
         , CONCAT(US.PRIMER_NOMBRE,' ',US.SEGUNDO_NOMBRE) NOMBRES_PAGADOR
         , CONCAT(US.PRIMER_APELLIDO,' ',US.SEGUNDO_APELLIDO) APELLIDOS_PAGADOR
         , FA.ID_FACTURA
         , FA.VALOR_TOTAL
         , FA.TIPO_DE_FACTURA
         , PG.ID_PAGO
         , TP.NOMBRE_PAGO
    FROM PEDIDO PE
    INNER JOIN PAQUETE PA         	ON PA.ID_PAQUETE         	= PE.PAQUETE_IDPAQUETE
    INNER JOIN USUARIO US         	ON US.ID_USUARIO         	= PE.USUARIOID_USUARIO
    INNER JOIN FACTURA FA        	ON FA.ID_FACTURA     		= PE.FACTURAID_FACTURA
    INNER JOIN PAGOS   PG         	ON PG.USUARIOID_USUARIO 	= US.ID_USUARIO
    INNER JOIN TIPOS_DE_PAGO TP 	ON TP.ID_TIPO_PAGO        	= PG.TIPOS_DE_PAGOID_TIPO_PAGO
    ORDER BY 1
    ) A
    GROUP BY TIPO_DE_PAQUETE
    ORDER BY 1 DESC
    ) B
;

-- --------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW VW_EVENTO_MAS_VENDIDO 
(	EVENTO_MAS_VENDIDO 
)

AS

SELECT MAX(TIPO_EVENTO) EVENTO_MAS_VENDIDO
FROM(
    SELECT COUNT(ID_PEDIDO) CANTIDAD
           ,TIPO_DE_PAQUETE TIPO_EVENTO
    FROM(
    SELECT PE.ID_PEDIDO
         , PA.TIPO_DE_PAQUETE
         , CONCAT(US.PRIMER_NOMBRE,' ',US.SEGUNDO_NOMBRE) NOMBRES_PAGADOR
         , CONCAT(US.PRIMER_APELLIDO,' ',US.SEGUNDO_APELLIDO) APELLIDOS_PAGADOR
         , FA.ID_FACTURA
         , FA.VALOR_TOTAL
         , FA.TIPO_DE_FACTURA
         , PG.ID_PAGO
         , TP.NOMBRE_PAGO
    FROM PEDIDO PE
    INNER JOIN PAQUETE PA         	ON PA.ID_PAQUETE         	= PE.PAQUETE_IDPAQUETE
    INNER JOIN USUARIO US         	ON US.ID_USUARIO         	= PE.USUARIOID_USUARIO
    INNER JOIN FACTURA FA         	ON FA.ID_FACTURA     		= PE.FACTURAID_FACTURA
    INNER JOIN PAGOS   PG         	ON PG.USUARIOID_USUARIO 	= US.ID_USUARIO
    INNER JOIN TIPOS_DE_PAGO TP 	ON TP.ID_TIPO_PAGO        	= PG.TIPOS_DE_PAGOID_TIPO_PAGO
    ORDER BY 1
    ) A
    GROUP BY TIPO_DE_PAQUETE
    ORDER BY 1 DESC
    ) B
;

-- ---------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW VW_CANTIDAD_REGISTROS_INICIO_ADMIN
(    CANTIDAD_USUARIOS
	,CANTIDAD_EMPLEADOS
    ,CANTIDAD_PEDIDOS
)

AS

SELECT   CANTIDAD_USUARIOS
		,CANTIDAD_EMPLEADOS
        ,CANTIDAD_PEDIDOS
FROM
	(SELECT COUNT(A.ID_USUARIO) AS CANTIDAD_USUARIOS
	FROM USUARIO 				AS A
	INNER JOIN USUARIO_SISTEMA 	AS B 	ON A.ID_USUARIO = B.USUARIOID_USUARIO
	WHERE B.ESTADO='ACTIVO') 	AS T1,
	(
	SELECT count(C.ID_EMPLEADO) AS CANTIDAD_EMPLEADOS
	FROM EMPLEADO AS C
	INNER JOIN USUARIO_SISTEMA 	AS D on C.ID_EMPLEADO = D.EMPLEADOID_EMPLEADO
	WHERE D.ESTADO='ACTIVO') 	AS T2,
    (
	SELECT count(E.ID_PEDIDO) AS CANTIDAD_PEDIDOS
	FROM PEDIDO AS E ) 			AS T3
;

-- -----------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE PR_VER_USUARIOS()
SELECT 	A.ID_USUARIO
		,CONCAT(A.PRIMER_NOMBRE, ' ',A.SEGUNDO_NOMBRE) 		AS NOMBRES
		,CONCAT(A.PRIMER_APELLIDO, ' ',A.SEGUNDO_APELLIDO) 	AS APELLIDOS
		,CONCAT(B.SIGLAS,'-',A.NUMERO_DOCUMENTO) 			AS DOCUMENTO
		,A.EDAD
        ,A.TELEFONO
		,A.EMAIL
		,D.NOMBRE_ROL 										AS ROL
		,C.NOMBRE_USUARIO 									AS USUARIO_SISTEMA
		,C.CLAVE
FROM 		USUARIO 		AS A
INNER JOIN 	TIPO_DOCUMENTO 	AS B		ON A.Tipo_documentoId_documento = B.id_documento
INNER JOIN 	USUARIO_SISTEMA AS C		ON C.USUARIOID_USUARIO 			= A.id_usuario
INNER JOIN 	ROL 			AS D		ON D.id_rol 					= A.rolId_rol
WHERE C.ESTADO = 'ACTIVO'
;

-- ------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE PR_VER_TURNOS()
SELECT 	C.ID_TURNO
        ,FECHA_INICIO_EVENTO
        ,FECHA_FIN_EVENTO
        ,A.ID_EMPLEADO
		,CONCAT(A.PRIMER_NOMBRE, ' ',A.SEGUNDO_NOMBRE, ' ',A.PRIMER_APELLIDO, ' ',A.SEGUNDO_APELLIDO) 	AS NOMBRE
        ,NOMBRE_DE_CARGO
        ,ID_PEDIDO
        ,CIUDAD_EVENTO
        ,BARRIO_EVENTO
        ,DIRECCION_EVENTO
FROM 		EMPLEADO 		AS A
INNER JOIN 	EMPLEADO_TURNO	AS B ON A.ID_EMPLEADO		=	B.EMPLEADOID_EMPLEADO
INNER JOIN	TURNO			AS C ON B.TURNOID_TURNO		=	C.ID_TURNO
INNER JOIN	PEDIDO			AS D ON C.PEDIDOID_PEDIDO	=	D.ID_PEDIDO
INNER JOIN	CARGO			AS E ON A.CARGOID_CARGO		=	E.ID_CARGO
-- WHERE A.ID_EMPLEADO = 1
ORDER BY 1
;

-- --------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE PR_VER_TURNO_EMPLEADO( P_ID int)
SELECT 	C.ID_TURNO
        ,FECHA_INICIO_EVENTO
        ,FECHA_FIN_EVENTO
        ,A.ID_EMPLEADO
		,CONCAT(A.PRIMER_NOMBRE, ' ',A.SEGUNDO_NOMBRE, ' ',A.PRIMER_APELLIDO, ' ',A.SEGUNDO_APELLIDO) 	AS NOMBRE
        ,NOMBRE_DE_CARGO
        ,ID_PEDIDO
        ,CIUDAD_EVENTO
        ,BARRIO_EVENTO
        ,DIRECCION_EVENTO
FROM 		EMPLEADO 		AS A
INNER JOIN 	EMPLEADO_TURNO	AS B ON A.ID_EMPLEADO		=	B.EMPLEADOID_EMPLEADO
INNER JOIN	TURNO			AS C ON B.TURNOID_TURNO		=	C.ID_TURNO
INNER JOIN	PEDIDO			AS D ON C.PEDIDOID_PEDIDO	=	D.ID_PEDIDO
INNER JOIN	CARGO			AS E ON A.CARGOID_CARGO		=	E.ID_CARGO
WHERE A.ID_EMPLEADO = P_ID
ORDER BY 1
;

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE PR_TIPO_DOCUMENTO()
select * from TIPO_DOCUMENTO;

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE PR_ROLES()
SELECT * FROM ROL
WHERE NOMBRE_ROL NOT IN ('Cliente')
;

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE PR_VER_PEDIDOS()
SELECT 	 A.ID_PEDIDO
		,A.FECHA_PEDIDO
		,CONCAT(B.PRIMER_NOMBRE,' ',B.SEGUNDO_NOMBRE)			AS NOMBRES
        ,CONCAT(B.PRIMER_APELLIDO,' ',B.SEGUNDO_APELLIDO)		AS APELLIDOS
        ,CONCAT(E.SIGLAS,' - ',B.NUMERO_DOCUMENTO)			    AS DOCUMENTO
		,C.ID_PAQUETE
        ,D.TIPO_DE_EVENTO										AS EVENTO
        ,C.TIPO_DE_PAQUETE										AS PAQUETE
        ,C.VALOR_PAQUETE
        ,C.VALOR_IVA											AS IVA
        ,C.VALOR_TOTAL
        ,F.ESTADO
        ,A.FECHA_INICIO_EVENTO
        ,A.FECHA_FIN_EVENTO
        ,CIUDAD_EVENTO
        ,BARRIO_EVENTO
        ,DIRECCION_EVENTO
FROM PEDIDO					AS A
INNER JOIN USUARIO			AS B	ON A.USUARIOID_USUARIO 			= B.ID_USUARIO
INNER JOIN PAQUETE			AS C	ON A.PAQUETE_IDPAQUETE 			= C.ID_PAQUETE
INNER JOIN EVENTO			AS D	ON C.EVENTOID_EVENTO 			= D.ID_EVENTO
INNER JOIN TIPO_DOCUMENTO	AS E	ON B.TIPO_DOCUMENTOID_DOCUMENTO	= E.ID_DOCUMENTO
INNER JOIN ESTADO_PEDIDO	AS F	ON A.ESTADOPEDIDOID_ESTADOPEDIDO= F.ID_ESTADOPEDIDO
ORDER BY ID_PEDIDO
;

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE PR_VER_INVENTARIO()
SELECT * FROM INVENTARIO
WHERE ESTADO='ACTIVO';

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE PR_ESTADO_PEDIDO()
SELECT * FROM ESTADO_PEDIDO;

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE PR_VER_EMPLEADOS()
SELECT 	A.ID_EMPLEADO
		,CONCAT(A.PRIMER_NOMBRE, ' ',A.SEGUNDO_NOMBRE) 		AS NOMBRES
		,CONCAT(A.PRIMER_APELLIDO, ' ',A.SEGUNDO_APELLIDO) 	AS APELLIDOS
		,CONCAT(B.SIGLAS,'-',A.NUMERO_DOCUMENTO) 			AS DOCUMENTO
		,A.EDAD
        ,A.TELEFONO
		,A.EMAIL
		,D.NOMBRE_ROL 										AS ROL
        ,E.NOMBRE_DE_CARGO									AS CARGO
		,C.NOMBRE_USUARIO 									AS USUARIO_SISTEMA
		,C.CLAVE
FROM 		EMPLEADO 		AS A
INNER JOIN 	TIPO_DOCUMENTO 	AS B		ON A.Tipo_documentoId_documento = B.id_documento
INNER JOIN 	USUARIO_SISTEMA AS C		ON C.EMPLEADOID_EMPLEADO		= A.ID_EMPLEADO
INNER JOIN 	ROL 			AS D		ON D.id_rol 					= A.rolId_rol
INNER JOIN	CARGO			AS E		ON A.CARGOID_CARGO				= E.ID_CARGO
WHERE C.ESTADO = 'ACTIVO'
;

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE PR_CARGOS()
SELECT * FROM CARGO
;

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_OBTENER_USUARIO_SISTEMA( 
	  P_TIPO_USUARIO	VARCHAR (30)
    , P_USUARIO 		VARCHAR (70)
    , P_CLAVE 			VARCHAR (40)

)

BEGIN
    -- Declarar variables
    DECLARE V_TIPO_USUARIO 					VARCHAR (50) DEFAULT UPPER(P_TIPO_USUARIO);
    DECLARE V_ISCORREO		 				INT;
	
    select locate('@',P_USUARIO) INTO V_ISCORREO;
    IF V_ISCORREO >0 THEN
    
		IF V_TIPO_USUARIO = 'USUARIO' THEN
        
			SELECT 	A.ID_USUARIO
					,CONCAT(A.PRIMER_NOMBRE, ' ',A.SEGUNDO_NOMBRE,' ',A.PRIMER_APELLIDO,' ',A.SEGUNDO_APELLIDO) AS NOMBRE		
					,A.EDAD
					,A.EMAIL
					,D.NOMBRE_ROL 																				AS ROL
                    ,C.AVATAR
					,C.NOMBRE_USUARIO 																			AS USUARIO_SISTEMA
					,C.CLAVE
			FROM 		USUARIO 		AS A
			INNER JOIN 	TIPO_DOCUMENTO 	AS B		ON A.Tipo_documentoId_documento = B.id_documento
			INNER JOIN 	USUARIO_SISTEMA AS C		ON C.USUARIOID_USUARIO = A.id_usuario
			INNER JOIN 	ROL 			AS D		ON D.id_rol = A.rolId_rol
			WHERE C.ESTADO ='ACTIVO'
			AND A.EMAIL = P_USUARIO
            AND C.CLAVE = P_CLAVE
			;
        
        ELSEIF V_TIPO_USUARIO = 'EMPLEADO' THEN
        
			SELECT 	 A.ID_EMPLEADO
					,CONCAT(A.PRIMER_NOMBRE, ' ',A.SEGUNDO_NOMBRE,' ',A.PRIMER_APELLIDO,' ',A.SEGUNDO_APELLIDO) AS NOMBRE
					,A.EDAD
					,A.EMAIL
					,D.NOMBRE_ROL 																				AS ROL
                    ,C.AVATAR
					,C.NOMBRE_USUARIO 																			AS USUARIO_SISTEMA
					,C.CLAVE
			FROM 		EMPLEADO 		AS A
			INNER JOIN 	TIPO_DOCUMENTO 	AS B		ON A.Tipo_documentoId_documento = B.id_documento
			INNER JOIN 	USUARIO_SISTEMA AS C		ON C.EMPLEADOID_EMPLEADO 		= A.ID_EMPLEADO
			INNER JOIN 	ROL 			AS D		ON D.id_rol 					= A.rolId_rol
			INNER JOIN	CARGO			AS E		ON A.CARGOID_CARGO 				= E.ID_CARGO
			WHERE C.ESTADO ='ACTIVO'
            AND A.EMAIL = P_USUARIO
            AND C.CLAVE = P_CLAVE
			;
        
        END IF;
	
    ELSEIF V_ISCORREO =0 THEN
    
		IF V_TIPO_USUARIO = 'USUARIO' THEN
        
			SELECT 	A.ID_USUARIO
			,CONCAT(A.PRIMER_NOMBRE, ' ',A.SEGUNDO_NOMBRE,' ',A.PRIMER_APELLIDO,' ',A.SEGUNDO_APELLIDO) AS NOMBRE		
			,A.EDAD
			,A.EMAIL
			,D.NOMBRE_ROL 																				AS ROL
            ,C.AVATAR
			,C.NOMBRE_USUARIO 																			AS USUARIO_SISTEMA
			,C.CLAVE
			FROM 		USUARIO 		AS A
			INNER JOIN 	TIPO_DOCUMENTO 	AS B		ON A.Tipo_documentoId_documento = B.id_documento
			INNER JOIN 	USUARIO_SISTEMA AS C		ON C.USUARIOID_USUARIO = A.id_usuario
			INNER JOIN 	ROL 			AS D		ON D.id_rol = A.rolId_rol
			WHERE C.ESTADO ='ACTIVO'
			AND C.NOMBRE_USUARIO = P_USUARIO
            AND C.CLAVE = P_CLAVE
			;
        
        ELSEIF V_TIPO_USUARIO = 'EMPLEADO' THEN
        
			SELECT 	 A.ID_EMPLEADO
					,CONCAT(A.PRIMER_NOMBRE, ' ',A.SEGUNDO_NOMBRE,' ',A.PRIMER_APELLIDO,' ',A.SEGUNDO_APELLIDO) AS NOMBRE
					,A.EDAD
					,A.EMAIL
					,D.NOMBRE_ROL 																				AS ROL
                    ,C.AVATAR
					,C.NOMBRE_USUARIO 																			AS USUARIO_SISTEMA
					,C.CLAVE
			FROM 		EMPLEADO 		AS A
			INNER JOIN 	TIPO_DOCUMENTO 	AS B		ON A.Tipo_documentoId_documento = B.id_documento
			INNER JOIN 	USUARIO_SISTEMA AS C		ON C.EMPLEADOID_EMPLEADO 		= A.ID_EMPLEADO
			INNER JOIN 	ROL 			AS D		ON D.id_rol 					= A.rolId_rol
			INNER JOIN	CARGO			AS E		ON A.CARGOID_CARGO 				= E.ID_CARGO
			WHERE C.ESTADO ='ACTIVO'
            AND C.NOMBRE_USUARIO = P_USUARIO
            AND C.CLAVE = P_CLAVE
			;
        
        END IF;
    
    END IF;
    
END &

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_OBTENER_ULTIMO_PAQUETE( 
    P_EVENTO 			VARCHAR (60)
)

BEGIN

SELECT 	MAX(TIPO_DE_PAQUETE) ULTIMO_PAQUETE
		,COUNT(*) CANTIDAD
FROM PAQUETE		AS A
INNER JOIN EVENTO 	AS B ON A.EVENTOID_EVENTO	=	B.ID_EVENTO
WHERE B.TIPO_DE_EVENTO = P_EVENTO
;

END &

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_ELIMINAR_USUARIO( ID_USUARIO INT)

BEGIN
	-- Declarar variables
    DECLARE V_ESTADO VARCHAR (30) DEFAULT 'INACTIVO';
	
    -- Elimina registro de la tabla usuario sistema
    UPDATE USUARIO_SISTEMA SET ESTADO = V_ESTADO WHERE USUARIOID_USUARIO = ID_USUARIO;
    
END &

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_ELIMINAR_TURNO( P_ID_EMPLEADO INT, P_ID_TURNO INT)

BEGIN
	-- Declarar variables
    DECLARE V_CANTIDAD INT;
	
    -- Revisar si existe el registro
    SELECT COUNT(*) INTO V_CANTIDAD FROM EMPLEADO_TURNO WHERE EMPLEADOID_EMPLEADO = P_ID_EMPLEADO AND TURNOID_TURNO = P_ID_TURNO;     
    
    IF V_CANTIDAD = 1 THEN
    
		DELETE FROM EMPLEADO_TURNO WHERE EMPLEADOID_EMPLEADO = P_ID_EMPLEADO AND TURNOID_TURNO = P_ID_TURNO; 
    
    END IF;
    
END &

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_ELIMINAR_PAQUETE(  P_ID_PAQUETE 	INT)

BEGIN
	-- Declarar variables
        DECLARE V_ESTADO  	 VARCHAR (30) DEFAULT 'INACTIVO'; 
	
    -- Se Inactiva el registro
    UPDATE PAQUETE SET ESTADO = V_ESTADO WHERE ID_PAQUETE = P_ID_PAQUETE;


END &

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_ELIMINAR_INVENTARIO( P_ID_INVENTARIO INT)

BEGIN
	-- Declarar variables
    DECLARE V_ESTADO VARCHAR (30) DEFAULT 'INACTIVO';
	
    -- Inactiva el registro de la tabla inventario
    UPDATE INVENTARIO SET ESTADO = V_ESTADO WHERE ID_INVENTARIO = P_ID_INVENTARIO;
    
END &

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_ELIMINAR_INVENTARIO_PAQUETE(  P_ID_PAQUETE 	INT, P_ID_INVENTARIO 	INT)

BEGIN
	-- Declarar variables
        DECLARE V_VALOR_SIN_IVA	 	BIGINT;
		DECLARE V_VALOR_TOTAL	 	BIGINT;
		DECLARE V_IVA	 			BIGINT;
        DECLARE V_CANTIDADES		BIGINT;
	
    -- Se elimina el registro
    DELETE FROM INVENTARIO_PAQUETE where PAQUETEID_PAQUETE = P_ID_PAQUETE AND INVENTARIOID_INVENTARIO = P_ID_INVENTARIO;
    
    -- contar cantidades
    SELECT COUNT(*) INTO V_CANTIDADES FROM INVENTARIO_PAQUETE WHERE PAQUETEID_PAQUETE = P_ID_PAQUETE;
    
    -- Verificar los valores del inventario para el paquete y sumar
	SELECT SUM(VALOR_SIN_IVA), SUM(IVA), SUM(VALOR_TOTAL) INTO V_VALOR_SIN_IVA, V_IVA, V_VALOR_TOTAL FROM INVENTARIO_PAQUETE WHERE PAQUETEID_PAQUETE = P_ID_PAQUETE;
    
    IF V_CANTIDADES > 0 THEN
    
		-- Actualizar el valor del paquete
		UPDATE Paquete SET valor_paquete = V_VALOR_SIN_IVA, valor_iva = V_IVA, valor_total = V_VALOR_TOTAL WHERE ID_PAQUETE = P_ID_PAQUETE;
    
    ELSE
    
		-- Actualizar el valor del paquete
		UPDATE Paquete SET valor_paquete = 0, valor_iva = 0, valor_total = 0 WHERE ID_PAQUETE = P_ID_PAQUETE;
    
    END IF;

END &

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_ELIMINAR_EVENTO( P_NOMBRE_EVENTO VARCHAR (60))

BEGIN
	-- Declarar variables
    DECLARE V_ESTADO 		VARCHAR (30) DEFAULT 'INACTIVO';
    DECLARE V_ID_EVENTO 	INT;
	
    -- Sacar id del evento
    SELECT ID_EVENTO INTO V_ID_EVENTO FROM EVENTO WHERE TIPO_DE_EVENTO = P_NOMBRE_EVENTO;
    
    -- Elimina registro de la tabla usuario sistema
    UPDATE EVENTO SET ESTADO = V_ESTADO WHERE TIPO_DE_EVENTO = P_NOMBRE_EVENTO;
    
    -- Se Inactiva el registro de los paquetes(todos)
    UPDATE PAQUETE SET ESTADO = V_ESTADO WHERE EVENTOID_EVENTO = V_ID_EVENTO;
    
    
END &

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_ELIMINAR_EMPLEADO( ID_EMPLEADO INT)

BEGIN
	-- Declarar variables
    DECLARE V_ESTADO VARCHAR (30) DEFAULT 'INACTIVO';
	
    -- Elimina registro de la tabla usuario sistema
    UPDATE USUARIO_SISTEMA SET ESTADO = V_ESTADO WHERE EMPLEADOID_EMPLEADO = ID_EMPLEADO;
    
END &

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_CREAR_USUARIO( P_PRIMER_NOMBRE VARCHAR (40), P_SEGUNDO_NOMBRE VARCHAR (40), P_PRIMER_APELLIDO VARCHAR (40), P_SEGUNDO_APELLIDO VARCHAR (40),
P_TIPO_DOCUMENTOID_DOCUMENTO INT(10), P_NUMERO_DOCUMENTO VARCHAR (20), P_EDAD INT (5), P_TELEFONO BIGINT (20), P_DIRECCION VARCHAR (50), P_EMAIL  VARCHAR (50))

BEGIN
    -- Declarar variables
    DECLARE V_PRIMER_NOMBRE 				VARCHAR (50) DEFAULT UPPER(P_PRIMER_NOMBRE);
    DECLARE V_SEGUNDO_NOMBRE 				VARCHAR (40) DEFAULT UPPER(P_SEGUNDO_NOMBRE); 
    DECLARE V_PRIMER_APELLIDO 				VARCHAR (40) DEFAULT UPPER(P_PRIMER_APELLIDO);
    DECLARE V_SEGUNDO_APELLIDO 				VARCHAR (40) DEFAULT UPPER(P_SEGUNDO_APELLIDO);
	DECLARE V_TIPO_DOCUMENTOID_DOCUMENTO 	INT		(10) DEFAULT UPPER(P_TIPO_DOCUMENTOID_DOCUMENTO);
    DECLARE V_NUMERO_DOCUMENTO 				VARCHAR (20) DEFAULT UPPER(P_NUMERO_DOCUMENTO);
    DECLARE V_EDAD 							INT 	(5)  DEFAULT UPPER(P_EDAD); 
    DECLARE V_TELEFONO 						BIGINT	(20) DEFAULT UPPER(P_TELEFONO);
    DECLARE V_DIRECCION 					VARCHAR (50) DEFAULT UPPER(P_DIRECCION); 
    DECLARE V_EMAIL  						VARCHAR (50) DEFAULT UPPER(P_EMAIL);
    DECLARE V_ROLID_ROL  					INT		(15) DEFAULT 1;
    DECLARE V_ESTADO  						VARCHAR (30) DEFAULT 'ACTIVO';
    DECLARE V_NUMERO_ALEATORIO_USUARIO     	BIGINT	(20);
    DECLARE V_NUMERO_ALEATORIO_CLAVE     	BIGINT	(20);
    DECLARE V_USUARIO_SISTEMA             	VARCHAR (50);
    DECLARE V_ULTIMO_REGISTRO				INT		(10);
    
    -- Generar n√∫mero aleatorio
    SELECT VALOR_ALEATORIO INTO V_NUMERO_ALEATORIO_USUARIO FROM( SELECT FLOOR(RAND()*(10000-1+1))+1 AS VALOR_ALEATORIO)  AS NUMERO_ALEATORIO_USUARIO;
    SELECT VALOR_ALEATORIO INTO V_NUMERO_ALEATORIO_CLAVE   FROM( SELECT LPAD(FLOOR(RAND()*(100000-1+1))+1,6,0)  AS VALOR_ALEATORIO) AS NUMERO_ALEATORIO_CLAVE;
    
    -- Generar usuario para login
    SELECT USUARIO_SISTEMA INTO V_USUARIO_SISTEMA FROM (SELECT CONCAT(SUBSTRING(V_PRIMER_NOMBRE,1,1),V_PRIMER_APELLIDO,V_NUMERO_ALEATORIO_USUARIO) AS USUARIO_SISTEMA) AS CREAR_USUARIO_SISTEMA;
    
    -- Crea el registro en la tabla usuario
    INSERT INTO USUARIO
    (Id_usuario, Primer_nombre, Segundo_nombre, Primer_apellido, Segundo_apellido, Tipo_documentoId_documento, Numero_documento, Edad, Telefono, Direccion, Email, RolId_rol) 
    VALUES
    (NULL, V_PRIMER_NOMBRE, V_SEGUNDO_NOMBRE, V_PRIMER_APELLIDO, V_SEGUNDO_APELLIDO, V_TIPO_DOCUMENTOID_DOCUMENTO, V_NUMERO_DOCUMENTO, V_EDAD, V_TELEFONO, V_DIRECCION, V_EMAIL, V_ROLID_ROL);
	
    -- Validar ultimo registro en la tabla usuario
    SELECT ULTIMO_ID_USUARIO INTO V_ULTIMO_REGISTRO FROM (select MAX(ID_USUARIO) AS ULTIMO_ID_USUARIO from USUARIO) AS ULTIMO_ID_USUARIO;
    
    -- crear usuario para login
    INSERT INTO USUARIO_SISTEMA
	(Id_Usuariosistema, Nombre_usuario, Clave, Avatar, Estado, UsuarioId_usuario, EmpleadoId_empleado)
	VALUES
	(NULL, V_USUARIO_SISTEMA, V_NUMERO_ALEATORIO_CLAVE, NULL, V_ESTADO, V_ULTIMO_REGISTRO, NULL);
    
END &

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_CREAR_TURNO( P_ID_PEDIDO INT, P_TIPO_DOCUMENTO VARCHAR (20), P_NUMERO_DOCUMENTO INT )

BEGIN
    -- Declarar variables
    DECLARE V_ID_PEDIDO				INT	;
    DECLARE V_ID_TURNO				INT	;
	DECLARE V_ID_EMPLEADO			INT	;
    
    -- VALIDAR SI EXISTE EL PEDIDO
    SELECT ID_PEDIDO INTO V_ID_PEDIDO FROM PEDIDO WHERE ID_PEDIDO = P_ID_PEDIDO;
    
    -- VALIDAR SI EXISTE EL TURNO
    SELECT ID_TURNO INTO V_ID_TURNO FROM TURNO WHERE PEDIDOID_PEDIDO = V_ID_PEDIDO;
    
    -- VALIDAR SI EXISTE EL EMPLEADOPR_CREAR_TURNO
    SELECT A.ID_EMPLEADO INTO V_ID_EMPLEADO FROM EMPLEADO AS A, TIPO_DOCUMENTO AS B WHERE B.SIGLAS = P_TIPO_DOCUMENTO AND A.NUMERO_DOCUMENTO = P_NUMERO_DOCUMENTO;
    
    -- Crea el registro en la tabla usuario
    IF V_ID_TURNO > 0 AND V_ID_EMPLEADO > 0 THEN
    
		insert into Empleado_turno( EmpleadoId_empleado, TurnoId_turno)
		values 
		(V_ID_EMPLEADO,	V_ID_TURNO);
    
    END IF;
    
END &

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_CREAR_PEDIDOS( 
	  P_PAQUETE_IDPAQUETE 	INT
    , P_USUARIOID_USUARIO 	INT
    , P_CIUDAD 				VARCHAR (60)
    , P_BARRIO 				VARCHAR (60)
    , P_DIRECCION			VARCHAR (100)
    , P_FECHA_INICIO_EVENTO DATETIME
    , P_FECHA_FIN_EVENTO	DATETIME
)

BEGIN
	
    -- Declarar variables
    DECLARE V_ID_PAQUETE	 				INT;
	DECLARE V_ID_USUARIO 					INT;
    DECLARE V_ID_FACTURA 					INT;
    DECLARE V_VALOR_SIN_IVA					INT;
    DECLARE V_IVA		 					INT;
    DECLARE V_VALOR_TOTAL 					INT;
    DECLARE V_CIUDAD						VARCHAR (80) DEFAULT UPPER(P_CIUDAD);
    DECLARE V_BARRIO						VARCHAR (80) DEFAULT UPPER(P_BARRIO);
    DECLARE V_DIRECCION						VARCHAR (80) DEFAULT UPPER(P_DIRECCION);
    DECLARE V_TIPO_DE_FACTURA				VARCHAR (50) DEFAULT 'ELECTRONICA';
	DECLARE V_DESCRIPCION_FACTURA			VARCHAR (80);
    DECLARE V_ESTADO_PEDIDO					INT DEFAULT 1;
    DECLARE V_ID_PEDIDO						INT;
    
    -- Validar si existe el paquete
    SELECT ID_PAQUETE, VALOR_PAQUETE, VALOR_IVA, VALOR_TOTAL, TIPO_DE_PAQUETE
    INTO V_ID_PAQUETE, V_VALOR_SIN_IVA,  V_IVA, V_VALOR_TOTAL, V_DESCRIPCION_FACTURA
    FROM (SELECT ID_PAQUETE, VALOR_PAQUETE, VALOR_IVA, VALOR_TOTAL, TIPO_DE_PAQUETE FROM PAQUETE WHERE ID_PAQUETE = P_PAQUETE_IDPAQUETE) AS ID_PAQUETE;
    
    -- Validar si existe el usuario
    SELECT ID_USUARIO INTO V_ID_USUARIO FROM (SELECT ID_USUARIO FROM USUARIO WHERE ID_USUARIO = P_USUARIOID_USUARIO) AS ID_USUARIO;
    
    -- Crear factura del pedido

    INSERT INTO FACTURA( VALOR_SIN_IVA, IVA, VALOR_TOTAL, TIPO_DE_FACTURA, DESCRIPCION_FACTURA)
    VALUES
    (V_VALOR_SIN_IVA,  V_IVA, V_VALOR_TOTAL, V_TIPO_DE_FACTURA, V_DESCRIPCION_FACTURA)
    ;
    
    -- Validar la factura generada
    SELECT ID_FACTURA INTO V_ID_FACTURA FROM (SELECT MAX(ID_FACTURA) AS ID_FACTURA FROM FACTURA) AS ID_FACTURA;
    
	INSERT INTO Pedido( Fecha_pedido, Fecha_inicio_evento, Fecha_fin_evento, Ciudad_evento, Barrio_evento, Direccion_evento, Paquete_Idpaquete, UsuarioId_usuario, EstadopedidoId_estadopedido, FacturaId_factura)
    VALUES
    (sysdate(), P_FECHA_INICIO_EVENTO, P_FECHA_FIN_EVENTO, V_CIUDAD, V_BARRIO, V_DIRECCION, V_ID_PAQUETE, V_ID_USUARIO, V_ESTADO_PEDIDO, V_ID_FACTURA)
    ;
    
    -- Traer ultimo registro de pedidos
    SELECT MAX(ID_PEDIDO) INTO V_ID_PEDIDO FROM PEDIDO WHERE ID_PEDIDO >0;
    
    insert into Turno( Fecha_inicio_turno, Fecha_fin_turno, PedidoId_pedido)
	values 
	( P_FECHA_INICIO_EVENTO, P_FECHA_FIN_EVENTO, V_ID_PEDIDO);
    
END &

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_CREAR_PAQUETES( 
	  P_NOMBRE_EVENTO 		VARCHAR (70)
    , P_NOBREPAQUETE 		VARCHAR (70)
	, P_VALOR				BIGINT
    , P_CANTIDAD			BIGINT
)

BEGIN
	
    -- Declarar variables
    DECLARE V_ID_EVENTO	 INT;
    DECLARE V_ESTADO  	 VARCHAR (30) DEFAULT 'ACTIVO'; 
    
	SELECT ID_EVENTO INTO V_ID_EVENTO FROM EVENTO WHERE TIPO_DE_EVENTO = P_NOMBRE_EVENTO;
    
    -- INSERTAR 
    insert into Paquete( valor_paquete, valor_iva, valor_total, Tipo_de_paquete, Cantidad_Personas, Estado, EventoId_evento)
	values
    ( 0, 0, 0, P_NOBREPAQUETE, P_CANTIDAD, V_ESTADO, V_ID_EVENTO);
    
END &

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_CREAR_INVENTARIO( 
	 P_INVENTARIO		VARCHAR (50)
	,P_CANTIDAD			INT
    ,P_VALOR_SIN_IVA	INT
    ,P_CATEGORIA		VARCHAR (50)
)

BEGIN
	
    -- Declarar variables
    DECLARE V_INVENTARIO		VARCHAR (50) DEFAULT UPPER(P_INVENTARIO);
    DECLARE V_VALOR_SIN_IVA 	INT DEFAULT	ROUND(P_VALOR_SIN_IVA);
    DECLARE V_VALOR_TOTAL 		INT DEFAULT ROUND(V_VALOR_SIN_IVA * 1.19);
	DECLARE V_IVA				INT DEFAULT V_VALOR_TOTAL - V_VALOR_SIN_IVA;
	DECLARE V_CATEGORIA 		VARCHAR (50) DEFAULT UPPER(P_CATEGORIA);
    DECLARE V_ESTADO			VARCHAR (30) DEFAULT 'ACTIVO';
    DECLARE V_INVENTARIO_NUEVO  VARCHAR (50); 
    
    SELECT INVENTARIO_NUEVO INTO V_INVENTARIO_NUEVO FROM(SELECT CONCAT(SUBSTRING(V_INVENTARIO,1,1),LOWER(SUBSTRING(V_INVENTARIO,2))) AS INVENTARIO_NUEVO) AS INVENTARIO;
    
   -- Insertar Inventario
   INSERT INTO Inventario( Inventario, Cantidad, Valor_sin_iva, Iva, Valor_Total, Categoria, Estado)
   VALUES
   (V_INVENTARIO_NUEVO, P_CANTIDAD, V_VALOR_SIN_IVA, V_IVA, V_VALOR_TOTAL, V_CATEGORIA, V_ESTADO)
   ;
    
END &

-- --------------------------------------------------------------------------------------------------------------------------------------------------------------

DELIMITER &
CREATE PROCEDURE PR_CREAR_INVENTARIO_PAQUETES( 
	  P_ID_PAQUETE 		INT
	, P_ID_INVENTARIO 	INT
    , P_CANTIDAD		INT
)

BEGIN
	
    -- Declarar variables
    DECLARE V_ID_PAQUETE	 	INT;
    DECLARE V_VALOR_SIN_IVA	 	BIGINT;
    DECLARE V_VALOR_TOTAL	 	BIGINT;
    DECLARE V_IVA	 			BIGINT;
    
    -- Sacar el valor del producto en inventario y se multiplica por la cantidad
    SELECT VALOR_SIN_IVA * P_CANTIDAD, IVA * P_CANTIDAD, VALOR_TOTAL * P_CANTIDAD INTO V_VALOR_SIN_IVA, V_IVA, V_VALOR_TOTAL FROM INVENTARIO WHERE ID_INVENTARIO = P_ID_INVENTARIO;
    
    -- Insertar en la tabla inventario paquete
    insert into Inventario_paquete(InventarioId_inventario, PaqueteId_paquete, cantidad, Valor_sin_iva, Iva, Valor_Total)
	values
    (P_ID_INVENTARIO, P_ID_PAQUETE, P_CANTIDAD, V_VALOR_SIN_IVA, V_IVA, V_VALOR_TOTAL);
    
    -- Verificar los valores del inventario para el paquete y sumar
	SELECT SUM(VALOR_SIN_IVA), SUM(IVA), SUM(VALOR_TOTAL) INTO V_VALOR_SIN_IVA, V_IVA, V_VALOR_TOTAL FROM INVENTARIO_PAQUETE WHERE PAQUETEID_PAQUETE = P_ID_PAQUETE;
    
    -- Actualizar el valor del paquete
    UPDATE Paquete SET valor_paquete = V_VALOR_SIN_IVA, valor_iva = V_IVA, valor_total = V_VALOR_TOTAL WHERE ID_PAQUETE = P_ID_PAQUETE;
    
END &


